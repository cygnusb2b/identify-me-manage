initial(value, init) { value == (prior(value) == null ? init : prior(value)) }

type User {
  firstName: NonEmptyString | Null, // can
  lastName: NonEmptyString | Null, // can
  email: InitialString, // User can't change
  // verificationSent: InitialFalse | InitialTimestamp, // User can't change
  photoURL: NonEmptyString | Null, // can
  createdAt: InitialTimestamp, // can't
  updatedAt: InitialTimestamp, // can't
  activeOrgId: NonEmptyString | Null,
  // lastLogin: InitialFalse | InitialTimestamp, // can't
  // loginCount: InitialNumber,
}

type NewOrganization {
  name: NonEmptyString,
}

type Organization {
  name: NonEmptyString,
  photoURL: NonEmptyString | Null,
  createdAt: InitialTimestamp,
  updatedAt: InitialTimestamp,
}

type OrganizationUser {
  email: InitialString,
  firstName: InitialString,
  lastName: InitialString,
  role: EnumValidRoles,
}

type InitialString extends String {
  validate() { initial(this, this) }
}

type EnumValidRoles extends String {
  validate() { this == 'Member' || this == 'Restricted' || this == 'Owner' }
}

type NonEmptyString extends String {
  validate() { this.length > 0 }
}

type InitialFalse extends Boolean {
  validate() { initial(this, false) }
}

type InitialNumber extends Number {
  validate() { initial(this, 0) }
}

type CurrentTimestamp extends Number {
  validate() { this == now }
}

type InitialTimestamp extends Number {
  validate() { initial(this, now) }
}

/**
 * Determines if the current user owns the applicable resource.
 */
isOwner(uid) { auth.uid === uid }
/**
 * Determines if the current user has a verified email address.
 */
isEmailVerified() { auth.token.email_verified === true }
/**
 * Determines if the current user is verified and owns the applicable resource.
 */
isVerifiedOwner(uid) { isOwner(uid) && isEmailVerified() }

/**
 * Determines if the current user has joined the provided organization ID, regardless of role.
 */
isOrgUser(oid) { isOrgOwner(oid) || isOrgMember(oid) || isOrgRestricted(oid) }

/**
 * Determines if the current user has the provided role for the provided organization.
 */
hasOrgRole(oid, role) {
  isEmailVerified() &&
  prior(root['models']['organization-users'][oid][auth.uid].role) === role
}

/**
 * Determines if the current user is a restricted user of the organization.
 */
isOrgRestricted(oid) { hasOrgRole(oid, "Restricted") }

/**
 * Determines if the current user is a member ("standard user") of the organization.
 */
isOrgMember(oid) { hasOrgRole(oid, "Member") }

/**
 * Determines if the current user is the owner of the organization.
 */
isOrgOwner(oid) { hasOrgRole(oid, "Owner") }

/*
  Model: User
  The primary user object.

  Client-Side Permissions
  - Read: If is owned by current user.
  - Write: If is owned by current user.

  Server Functions
    Created By
      Auth: onAuthUserCreate
    Deleted By
      Auth: onAuthUserDelete
    Updates
      `/models/organization-users/${oid}/${uid}` via `onUserUpdate`
 */
path /models/users/{uid} is User {
  read() { isOwner(uid) }
  write() { isOwner(uid) }
}

/*
  Model: Organization

  Client-Side Permissions
  - Read: If the current user is an org user.
  - Write: If the current user is an org user.

  Server Functions
    Created By
      `/actions/create-organization/{uid}/{oid}` from `actionCreateOrganization`
    Updates
      `/models/user-organizations/${uid}/${oid}` via `onOrganizationUpdate`
 */
path /models/organizations/{oid} is Organization {
  read() { isOrgUser(oid) }
  write() { isOrgOwner(oid) }
}

/*
  Model: User Organization
  Lists all organizations assigned to a user

  Client-Side Permissions
  - Read: If is owned by current user.
  - Write: None

  Server Functions
    Created By
      `/models/organization-users/{oid}/{uid}` from `onOrganizationUsersCreate`
    Updated By
      `/models/organizations/{oid}` from `onOrganizationUpdate`
 */
path /models/user-organizations/{uid} {
  read() { isOwner(uid) }
}

/*
  Model: Organization User
  Lists all users assigned to an organization

  Client-Side Permissions
  - Read: If the current user is an org user.
  - Write: If the current user is an org owner.

  Server Functions
    Created By
      `/actions/create-organization/{uid}/{oid}` from `actionCreateOrganization`
    Creates
      `/models/organizations/{oid}` via `onOrganizationUsersCreate`
    Updated By
      `/models/users/{uid}` from `onUserUpdate`
 */
path /models/organization-users/{oid}/{uid} {
  read() { isOrgUser(oid) }
  write() { isOrgOwner(oid) }
}

/*
  Action: Notify User Login

  Client-Side Permissions
  - Read: None.
  - Write: If the current user is the verified owner.

  Curretly not active.
 */
path /actions/notify-login/{uid} {
  write() { isVerifiedOwner(uid) }
}

/*
  Action: Create Organization

  Client-Side Permissions
  - Read: None.
  - Write: If the current user is the verified owner.

  Server Functions
    Creates
      `/models/organizations/{oid}` via `actionCreateOrganization`
      `/models/organization-users/{oid}/{uid` via `actionCreateOrganization`
 */
path /actions/create-organization/{uid}/{oid} is NewOrganization {
  write() { isVerifiedOwner(uid) }
}
