isEmailVerified() { auth.token.email_verified === true }
isOrgMember(oid) { isEmailVerified() && prior(root['owner-readable']['user-organizations'][auth.uid].organizations[oid]) != null }
isOrgOwner(oid) { isEmailVerified() && prior(root['owner-readable']['user-organizations'][auth.uid].organizations[oid].role) === "Owner" }

path / {
  read() { false }
  write() { false }
}

path /readable {
  read() { auth !== null }
}

// @todo Each type should be defined here, not wildcarded with $type
//       This ensures that random data cannot be written here.
path /writeable {
  write() { auth !== null }
}

path /owner-readable/{type}/{uid} {
    read() { auth.uid === uid }
}

// @todo Each type should be defined here, not wildcarded with $type
//       This ensures that random data cannot be written here.
path /owner-writeable/{type}/{uid} {
    write() { auth.uid === uid }
}

path /org-readable/{oid} {
    read() { isOrgMember(oid) }
}

path /org-readable-owner/{oid} {
    read() { isOrgOwner(oid) }
}

path /org-writeable/{type}/{uid}/{oid} {
    write() { auth.uid === uid && isOrgMember(oid) }
}

path /org-writeable-owner/{type}/{uid}/{oid} {
    write() { auth.uid === uid && isOrgOwner(oid) }
}
