initial(value, init) { value == (prior(value) == null ? init : prior(value)) }

type User {
  firstName: NonEmptyString | Null, // can
  lastName: NonEmptyString | Null, // can
  email: InitialString, // User can't change
  // verificationSent: InitialFalse | InitialTimestamp, // User can't change
  photoURL: NonEmptyString | Null, // can
  createdAt: InitialTimestamp, // can't
  updatedAt: InitialTimestamp, // can't
  activeOrgId: NonEmptyString | Null,
  // lastLogin: InitialFalse | InitialTimestamp, // can't
  // loginCount: InitialNumber,
}



type NewTenant {
  name: NonEmptyString,
}

type Tenant {
  name: NonEmptyString,
  photoURL: NonEmptyString | Null,
  createdAt: InitialTimestamp,
  updatedAt: CurrentTimestamp,
}

type InitialString extends String {
  validate() { initial(this, this) }
}

type EnumValidRoles extends String {
  validate() { this == 'Member' || this == 'Restricted' || this == 'Owner' }
}

type NonEmptyString extends String {
  validate() { this.length > 0 }
}

type InitialFalse extends Boolean {
  validate() { initial(this, false) }
}

type InitialNumber extends Number {
  validate() { initial(this, 0) }
}

type CurrentTimestamp extends Number {
  validate() { this == now }
}

type InitialTimestamp extends Number {
  validate() { initial(this, now) }
}

/**
 * Determines if the current user owns the applicable resource.
 */
isOwner(uid) { auth.uid === uid }
/**
 * Determines if the current user has a verified email address.
 */
isEmailVerified() { auth.token.email_verified === true }
/**
 * Determines if the current user is verified and owns the applicable resource.
 */
isVerifiedOwner(uid) { isOwner(uid) && isEmailVerified() }

/**
 * Determines if the current user has joined the provided tenant ID, regardless of role.
 */
isTenantUser(tid) { isTenantOwner(tid) || isTenantMember(tid) || isTenantRestricted(tid) }

/**
 * Determines if the current user has the provided role for the provided tenant.
 */
hasTenantRole(tid, role) {
  isEmailVerified() &&
  prior(root['tenant'][tid]['users'][auth.uid].role) === role
}

/**
 * Determines if the current user is a restricted user of the tenant.
 */
isTenantRestricted(tid) { hasTenantRole(tid, "Restricted") }

/**
 * Determines if the current user is a member ("standard user") of the tenant.
 */
isTenantMember(tid) { hasTenantRole(tid, "Member") }

/**
 * Determines if the current user is the owner of the tenant.
 */
isTenantOwner(tid) { hasTenantRole(tid, "Owner") }

/*
  Model: User
  The primary user object.
 */
path /app/users/{uid} is User {
  read() { isOwner(uid) }
  write() { isOwner(uid) }
}

/*
  Model: Tenant
 */
path /app/tenants/{tid} is Tenant {
  read() { isTenantUser(tid) }
  write() { isTenantOwner(tid) }
}

/*
  Model: User Tenant
  Lists all tenants assigned to a user
 */
path /user/{uid}/tenants {
  read() { isOwner(uid) }
}

/*
  Model: Tenant User
  Lists all users assigned to a tenant
 */
path /tenant/{tid}/users/{uid} {
  read() { isTenantUser(tid) }
  write() { isTenantOwner(tid) }
}

/*
  Action: Notify User Login
 */
// path /actions/notify-login/{uid} {
//   write() { isVerifiedOwner(uid) }
// }

/*
  User Action: Create Tenant
 */
path /user/{uid}/actions/create-tenant/{tid} is NewTenant {
  write() { isVerifiedOwner(uid) }
}
